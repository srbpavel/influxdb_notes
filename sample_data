https://docs.influxdata.com/influxdb/v2.0/reference/sample-data/#noaa-water-sample-data
https://docs.influxdata.com/flux/v0.x/stdlib/csv/from/


#IMPORT: download data from ONLINE_CSV to BUCKET

#URL
import "experimental/csv"
csv.from(url: "https://influx-testdata.s3.amazonaws.com/noaa.csv")
  |> to(bucket: "noaa", org: "foookin_paavel")

#FILE // tohle me zatim nedre, ikdyz podle dokumentace by melo ?
#ERROR: failed to initialize execute state: filesystem service uninitialized in dependencies
#ERROR: vypadato to bug, pac je toho dost v issues, ale zadny reseni
#import jsme udelal pres CLI WRITE

import "csv"
csv.from(file: "/home/conan/soft/influxdb_notes/noaa.csv") ,mode: "annotations")
|> to(bucket: "noaa_file", org: "foookin_paavel")

$ docker container exec -i -t dck_influxdb influx query 'import "csv" csv.from(file: "/var/lib/influxdb2/noaa.csv") |> limit(n: 5)' --skip-verify
Error: Failed to initialize execute state: filesystem service uninitialized in dependencies.
See 'influx query -h' for help


#EXPLORE / +- start: 2019-08-17T00:00:00Z stop: 2019-09-17T21:42:00Z
# |> range(start: 0) / infinite range
#
from(bucket:"noaa") |> range(start:-3y) |> drop(columns:["_start", "_stop"]) |> count()

#
from(bucket:"noaa") |> range(start: 0) |> drop(columns:["_start", "_stop"])
// |> count()
|> filter(fn: (r) => r["_measurement"] == "average_temperature")
|> limit(n: 5)
//|> yield(name: "avg_temp") //pokud toto nedam je defaultne nazvana _result


#EXPLORE ii. 
//nekde maji spatna vstupni data pac nekde je _value str a ne int/float !!!

from(bucket:"noaa_file") 
|> range(start: -3y) 
|> drop(columns:["_start", "_stop"])
//from(bucket:"noaa") |> range(start: -3y) |> drop(columns:["_start", "_stop"])

|> filter(fn: (r) => r["_measurement"] == "average_temperature")
|> filter(fn: (r) => r["_field"] == "degrees")
|> filter(fn: (r) => r["location"] == "coyote_creek" or r["location"] == "santa_monica")

//|> filter(fn: (r) => r._value > 80) //|> filter(fn: (r) => r._value >= float(v: 80))

//|> filter(fn: (r) => if r["location"] == "coyote_creek" then r._value > 80.0 else r._value < 80.0)

//|> sort(columns: ["_time"], desc: true) // false) //

|> limit(n: 5)

//|> group(columns:["_measurement", "_field"]) //|> group(columns:["_measurement", "_field", "location"])
//|> group()

//|> yield(name: "avg_temp") //pokud toto nedam je defaultne nazvana _result

// |> count()


#UP
#DCK_RUTH verze 2.0.4 / v0.104.0


#DEBIAN_JOZEFINA 2.0.9 / v0.131.0
#DOWN

#error in csv.from(): csv.from() failed to read file: filesystem service is uninitialized

import "csv"

csv.from(file: "/home/conan/soft/influxdb_notes/noaa.csv", mode: "annotations")


#zde je noaa ale ne noaaWater
$ influx query 'import "influxdata/influxdb/sample" sample.list() |> yield()' --raw

#group,false,false,false,false,false,false
#datatype,string,long,string,string,string,string
#default,_result,,,,,

,result,table,name,description,url,size
,,0,airSensor,"Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.",https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv,~600 KB
,,0,birdMigration,"2019 African bird migration data from the ""Movebank: Animal Tracking"" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.",https://influx-testdata.s3.amazonaws.com/bird-migration.csv,~1.2 MB
,,0,noaa,Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.,https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv,~1.3 MB
,,0,usgs,USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.,https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv,~6 MB


#SAMPLE
import "influxdata/influxdb/sample"

//water = sample.list() |> yield()
water = sample.data(set: "noaa")

water
|> range(start: -24h)

|> filter(fn: (r) => r["_measurement"] == "ndbc")
|> filter(fn: (r) => r["_field"] == "air_temp_degc")
|> filter(fn: (r) => r["station_id"] == "41004")

|> yield()

#TO_BUCKET
import "influxdata/influxdb/sample"

water = sample.data(set: "noaa")

water |> to(bucket: "noaa_sample", org: "foookin_paavel")


#QUERY
$ influx query 'from(bucket: "noaa_sample") |> range(start: -24h) |> filter(fn: (r) => r["_measurement"] == "ndbc") |> filter(fn: (r) => r["_field"] == "air_temp_degc") |> filter(fn: (r) => r["station_id"] == "41004") |> yield()' --raw

#group,false,false,true,true,false,false,true,true,true,true,true,true,true
#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,double,string,string,string,string,string,string,string
#default,_result,,,,,,,,,,,,

,result,table,_start,_stop,_time,_value,_field,_measurement,station_id,station_name,station_owner,station_pgm,station_type
,,0,2021-11-02T20:32:46.263414344Z,2021-11-03T20:32:46.263414344Z,2021-11-03T20:00:00Z,-1.4,air_temp_degc,ndbc,41004,"EDISTO - 41 NM Southeast of Charleston, SC",NDBC,NDBC Meteorological/Ocean,other

